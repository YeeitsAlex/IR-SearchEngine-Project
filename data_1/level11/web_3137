https://blue.sa.ucsb.edu/
<!DOCTYPE html>
<html lang="en-US">
 <head>
  <meta content="IE=10.000" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
  <meta content="text/html;charset=utf-8" http-equiv="content-type"/>
  <meta content="no-cache,no-store" http-equiv="cache-control"/>
  <meta content="no-cache" http-equiv="pragma"/>
  <meta content="-1" http-equiv="expires"/>
  <meta content="Connecting to sso.my.ucsb.edu" name="mswebdialog-title"/>
  <title>
   Sign In
  </title>
  <script type="text/javascript">
   //<![CDATA[
function LoginErrors(){this.userNameFormatError = 'Enter your user ID in the format \u0026quot;domain\\user\u0026quot; or \u0026quot;user@domain\u0026quot;.'; this.passwordEmpty = 'Enter your password.'; this.passwordTooLong = 'Password must be shorter than 128 characters.';}; var maxPasswordLength = 128;
//]]>
  </script>
  <script type="text/javascript">
   //<![CDATA[
// Copyright (c) Microsoft Corporation.  All rights reserved.
function InputUtil(errTextElementID, errDisplayElementID) {

    if (!errTextElementID)  errTextElementID = 'errorText'; 
    if (!errDisplayElementID)  errDisplayElementID = 'error'; 

    this.hasFocus = false;
    this.errLabel = document.getElementById(errTextElementID);
    this.errDisplay = document.getElementById(errDisplayElementID);
};
InputUtil.prototype.canDisplayError = function () {
    return this.errLabel && this.errDisplay;
}
InputUtil.prototype.checkError = function () {
    if (!this.canDisplayError){
        throw new Error ('Error element not present');
    }
    if (this.errLabel && this.errLabel.innerHTML) {
        this.errDisplay.style.display = '';        
        var cause = this.errLabel.getAttribute('for');
        if (cause) {
            var causeNode = document.getElementById(cause);
            if (causeNode && causeNode.value) {
                causeNode.focus();
                this.hasFocus = true;
            }
        }
    }
    else {
        this.errDisplay.style.display = 'none';
    }
};
InputUtil.prototype.setInitialFocus = function (input) {
    if (this.hasFocus) return;
    var node = document.getElementById(input);
    if (node) {
        if ((/^\s*$/).test(node.value)) {
            node.focus();
            this.hasFocus = true;
        }
    }
};
InputUtil.prototype.setError = function (input, errorMsg) {
    if (!this.canDisplayError) {
        throw new Error('Error element not present');
    }
    input.focus();

    if (errorMsg) {
        this.errLabel.innerHTML = errorMsg;
    }
    this.errLabel.setAttribute('for', input.id);
    this.errDisplay.style.display = '';
};
InputUtil.makePlaceholder = function (input) {
    var ua = navigator.userAgent;

    if (ua != null && 
        (ua.match(/MSIE 9.0/) != null || 
         ua.match(/MSIE 8.0/) != null ||
         ua.match(/MSIE 7.0/) != null)) {
        var node = document.getElementById(input);
        if (node) {
            var placeholder = node.getAttribute("placeholder");
            if (placeholder != null && placeholder != '') {
                var label = document.createElement('input');
                label.type = "text";
                label.value = placeholder;
                label.readOnly = true;
                label.style.position = 'absolute';
                label.style.borderColor = 'transparent';
                label.className = node.className + ' hint';
                label.tabIndex = -1;
                label.onfocus = function () { this.nextSibling.focus(); };

                node.style.position = 'relative';
                node.parentNode.style.position = 'relative';
                node.parentNode.insertBefore(label, node);
                node.onkeyup = function () { InputUtil.showHint(this); };
                node.onblur = function () { InputUtil.showHint(this); };
                node.style.background = 'transparent';

                node.setAttribute("placeholder", "");
                InputUtil.showHint(node);
            }
        }
    }
};
InputUtil.focus = function (inputField) {
    var node = document.getElementById(inputField);
    if (node) node.focus();
};
InputUtil.hasClass = function(node, clsName) {
    return node.className.match(new RegExp('(\\s|^)' + clsName + '(\\s|$)'));
};
InputUtil.addClass = function(node, clsName) {
    if (!this.hasClass(node, clsName)) node.className += " " + clsName;
};
InputUtil.removeClass = function(node, clsName) {
    if (this.hasClass(node, clsName)) {
        var reg = new RegExp('(\\s|^)' + clsName + '(\\s|$)');
        node.className = node.className.replace(reg, ' ');
    }
};
InputUtil.showHint = function (node, gotFocus) {
    if (node.value && node.value != '') {
        node.previousSibling.style.display = 'none';
    }
    else {
        node.previousSibling.style.display = '';
    }
};
//]]>
  </script>
  <link href="/adfs/portal/css/style.css?id=ADDB8C43167320623AB9D3B0E513E67A8168D2BC64B41C61BA31991FCF3C7A1F" rel="stylesheet" type="text/css"/>
 </head>
 <body class="body" dir="ltr">
  <div id="noScript" style="position:static; width:100%; height:100%; z-index:100">
   <h1>
    JavaScript required
   </h1>
   <p>
    JavaScript is required. This web browser does not support JavaScript or JavaScript in this web browser is not enabled.
   </p>
   <p>
    To find out if your web browser supports JavaScript or to enable JavaScript, see web browser help.
   </p>
  </div>
  <script language="JavaScript" type="text/javascript">
   document.getElementById("noScript").style.display = "none";
  </script>
  <div id="fullPage">
   <div class="float" id="brandingWrapper">
    <div id="branding">
    </div>
   </div>
   <div class="float" id="contentWrapper">
    <div id="content">
     <div id="header">
      <img alt="sso.my.ucsb.edu" class="logoImage" src="/adfs/portal/logo/logo.png?id=276A4874D697AF6211331AD6D75B64FAC37F6E0E14BDD782DD2A2ADBE0D9B2CB"/>
     </div>
     <div id="workArea">
      <div class="groupMargin" id="authArea">
       <div id="loginArea">
        <div class="groupMargin" id="loginMessage">
         Sign in with your organizational account
        </div>
        <form action="/adfs/ls/?wa=wsignin1.0&amp;wtrealm=http%3a%2f%2fblue.sa.ucsb.edu%2fLanding%2f&amp;wctx=rm%3d0%26id%3dpassive%26ru%3d%252fLanding%252fHomepage.aspx&amp;wct=2019-03-06T18%3a43%3a20Z&amp;rpsa-rn=5TFey%252fVSv9IF17J4Pn8osgH1LticIlQr%252blbEYGshM3NEFsBarZ3nQ0gxvumHdbV6qoPtP%252bQxhVRxl0U8xMNPDA%253d%253d&amp;rpsa-an=AQYFW%252bAMuZU5NJ2X8VVjYJfEUAIzGOJ5TsVA9tf6tagj6SxfnASqIPQ%252flyrZbB%252fl%252fNHuWZohw%252bNC%252fACrG4MFLQ%253d%253d&amp;rpsa-se=f5hRpBYXKP06s9Rp4Upm1RVnbN1guWDIEz%252bUg2%252fhCNcZmztYI83a4VLHJnGhBHWHlIimkaQbfgqP7TVvX254WQ%253d%253d&amp;rpsa-sedn=X2Lt5R6GUd70XVDr698CZw06ZmjVMNVD2Spge3GLRrM%253d" autocomplete="off" id="loginForm" method="post" novalidate="novalidate" onkeypress="if (event &amp;&amp; event.keyCode == 13) Login.submitLoginRequest();">
         <div class="fieldMargin error smallText" id="error">
          <label for="" id="errorText">
          </label>
         </div>
         <div id="formsAuthenticationArea">
          <div id="userNameArea">
           <input autocomplete="off" class="text fullWidth" id="userNameInput" name="UserName" placeholder="someone@example.com" spellcheck="false" tabindex="1" type="email" value=""/>
          </div>
          <div id="passwordArea">
           <input autocomplete="off" class="text fullWidth" id="passwordInput" name="Password" placeholder="Password" tabindex="2" type="password"/>
          </div>
          <div id="kmsiArea" style="display:none">
           <input id="kmsiInput" name="Kmsi" tabindex="3" type="checkbox" value="true"/>
           <label for="kmsiInput">
            Keep me signed in
           </label>
          </div>
          <div class="submitMargin" id="submissionArea">
           <span class="submit" id="submitButton" onclick="return Login.submitLoginRequest();" onkeypress="if (event &amp;&amp; event.keyCode == 32) Login.submitLoginRequest();" tabindex="4">
            Sign in
           </span>
          </div>
         </div>
         <input id="optionForms" name="AuthMethod" type="hidden" value="FormsAuthentication"/>
        </form>
        <div id="authOptions">
         <form action="https://sso.my.ucsb.edu:443/adfs/ls/?wa=wsignin1.0&amp;wtrealm=http%3a%2f%2fblue.sa.ucsb.edu%2fLanding%2f&amp;wctx=rm%3d0%26id%3dpassive%26ru%3d%252fLanding%252fHomepage.aspx&amp;wct=2019-03-06T18%3a43%3a20Z&amp;rpsa-rn=5TFey%252fVSv9IF17J4Pn8osgH1LticIlQr%252blbEYGshM3NEFsBarZ3nQ0gxvumHdbV6qoPtP%252bQxhVRxl0U8xMNPDA%253d%253d&amp;rpsa-an=AQYFW%252bAMuZU5NJ2X8VVjYJfEUAIzGOJ5TsVA9tf6tagj6SxfnASqIPQ%252flyrZbB%252fl%252fNHuWZohw%252bNC%252fACrG4MFLQ%253d%253d&amp;rpsa-se=f5hRpBYXKP06s9Rp4Upm1RVnbN1guWDIEz%252bUg2%252fhCNcZmztYI83a4VLHJnGhBHWHlIimkaQbfgqP7TVvX254WQ%253d%253d&amp;rpsa-sedn=X2Lt5R6GUd70XVDr698CZw06ZmjVMNVD2Spge3GLRrM%253d" id="options" method="post">
          <script type="text/javascript">
           function SelectOption(option) {
                    var i = document.getElementById('optionSelection');
                    i.value = option;
                    document.forms['options'].submit();
                    return false;
                }
          </script>
          <input id="optionSelection" name="AuthMethod" type="hidden"/>
          <div class="groupMargin">
          </div>
         </form>
        </div>
        <div class="groupMargin" id="introduction">
        </div>
        <script type="text/javascript">
         //<![CDATA[

            function Login() {
            }

            Login.userNameInput = 'userNameInput';
            Login.passwordInput = 'passwordInput';

            Login.initialize = function () {

                var u = new InputUtil();

                u.checkError();
                u.setInitialFocus(Login.userNameInput);
                u.setInitialFocus(Login.passwordInput);
            }();

            Login.submitLoginRequest = function () { 
                var u = new InputUtil();
                var e = new LoginErrors();

                var userName = document.getElementById(Login.userNameInput);
                var password = document.getElementById(Login.passwordInput);

                if (!userName.value || !userName.value.match('[@\\\\]')) {
                    u.setError(userName, e.userNameFormatError);
                    return false;
                }

                if (!password.value) {
                    u.setError(password, e.passwordEmpty);
                    return false;
                }

                if (password.value.length > maxPasswordLength) {
                    u.setError(password, e.passwordTooLong);
                    return false;
                }

                document.forms['loginForm'].submit();
                return false;
            };

            InputUtil.makePlaceholder(Login.userNameInput);
            InputUtil.makePlaceholder(Login.passwordInput);
        //]]>
        </script>
       </div>
      </div>
     </div>
     <div id="footerPlaceholder">
     </div>
    </div>
    <div id="footer">
     <div class="floatReverse" id="footerLinks">
      <div>
       <span id="copyright">
        © 2013 Microsoft
       </span>
      </div>
     </div>
    </div>
   </div>
  </div>
  <script type="text/javascript">
   //<![CDATA[
// Copyright (c) Microsoft Corporation.  All rights reserved.

// This file contains several workarounds on inconsistent browser behaviors that administrators may customize.
"use strict";
var cookieName = "sa-lai";
var supportErrorDisplayed = false;
var supportLoginAttemptCount = 3;
var minimumWorkAreaWidth = 800;

// iPhone email friendly keyboard does not include "\" key, use regular keyboard instead.
// Note change input type does not work on all versions of all browsers.
if (navigator.userAgent.match(/iPhone/i) != null) {
    var emails = document.querySelectorAll("input[type='email']");
    if (emails) {
        for (var i = 0; i < emails.length; i++) {
            emails[i].type = 'text';
        }
    }
}

// In the CSS file we set the ms-viewport to be consistent with the device dimensions, 
// which is necessary for correct functionality of immersive IE. 
// However, for Windows 8 phone we need to reset the ms-viewport's dimension to its original
// values (auto), otherwise the viewport dimensions will be wrong for Windows 8 phone.
// Windows 8 phone has agent string 'IEMobile 10.0'
if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
    var msViewportStyle = document.createElement("style");
    msViewportStyle.appendChild(
        document.createTextNode(
            "@-ms-viewport{width:auto!important}"
        )
    );
    msViewportStyle.appendChild(
        document.createTextNode(
            "@-ms-viewport{height:auto!important}"
        )
    );
    document.getElementsByTagName("head")[0].appendChild(msViewportStyle);
}

// If the innerWidth is defined, use it as the viewport width.
if (window.innerWidth && window.outerWidth && window.innerWidth !== window.outerWidth) {
    var viewport = document.querySelector("meta[name=viewport]");
    viewport.setAttribute('content', 'width=' + window.innerWidth + ', initial-scale=1.0, maximum-scale=1.0');
}

// Gets the current style of a specific property for a specific element.
function getStyle(element, styleProp) {
    var propStyle = null;

    if (element && element.currentStyle) {
        propStyle = element.currentStyle[styleProp];
    }
    else if (element && window.getComputedStyle) {
        propStyle = document.defaultView.getComputedStyle(element, null).getPropertyValue(styleProp);
    }

    return propStyle;
}

// The script below is used for downloading the illustration image 
// only when the branding is displaying. This script work together
// with the code in PageBase.cs that sets the html inline style
// containing the class 'illustrationClass' with the background image.
var computeLoadIllustration = function () {
    var branding = document.getElementById("branding");
    var brandingDisplay = getStyle(branding, "display");
    var brandingWrapperDisplay = getStyle(document.getElementById("brandingWrapper"), "display");

    if (brandingDisplay && brandingDisplay !== "none" &&
        brandingWrapperDisplay && brandingWrapperDisplay !== "none") {
        var newClass = "illustrationClass";

        if (branding.classList && branding.classList.add) {
            branding.classList.add(newClass);
        } else if (branding.className !== undefined) {
            branding.className += " " + newClass;
        }
        if (window.removeEventListener) {
            window.removeEventListener('load', computeLoadIllustration, false);
            window.removeEventListener('resize', computeLoadIllustration, false);
        }
        else if (window.detachEvent) {
            window.detachEvent('onload', computeLoadIllustration);
            window.detachEvent('onresize', computeLoadIllustration);
        }
    }
};

if (window.addEventListener) {
    window.addEventListener('resize', computeLoadIllustration, false);
    window.addEventListener('load', computeLoadIllustration, false);
}
else if (window.attachEvent) {
    window.attachEvent('onresize', computeLoadIllustration);
    window.attachEvent('onload', computeLoadIllustration);
}

//Custom UCSB SA Single Sign-on Functionality
var contentWrapper = document.getElementById('contentWrapper');
if (contentWrapper) {
    contentWrapper.className =
    contentWrapper.className.replace(/\bfloat\b/, '');
}

var brandingWrapper = document.getElementById('brandingWrapper');
if (brandingWrapper) {
    brandingWrapper.className =
    brandingWrapper.className.replace(/\bfloat\b/, '');
}

var copyRight = document.getElementById('copyright');
if (copyRight) {
    copyRight.innerHTML = '&#169; 2017 The Regents of the University of California, All Rights Reserved'

    var footerPlaceHolder = document.getElementById('footerPlaceholder');
    if (footerPlaceHolder) {
        footerPlaceHolder.appendChild(copyRight);
    }
}

var footer = document.getElementById('footer');
if (footer) {
    var footerLinks = document.getElementById('footerLinks');
    if (footerLinks) {
        footerLinks.innerHTML = '<span class="footer_link"><a id="footer_link_terms" href="http://www.ucsb.edu/terms-of-use" target="_blank">Terms of Use</a> / <a id="footer_link_support" href=\"mailto:SSOHelp@sa.ucsb.edu\">SSO Help</a></span>'
        footerLinks.className = footerLinks.className.replace(/(?:^|\s)floatReverse(?!\S)/g, '');
        var footerPlaceHolder = document.getElementById('footerPlaceholder');
        if (footerPlaceHolder) {
            footerPlaceHolder.appendChild(footer);
        }

    }
}
var loginMessage = document.getElementById('loginMessage');
if (loginMessage) {
    loginMessage.innerHTML = 'Please sign in with your UCSB Net ID and Password';
}


function adjustDisplay() {
    var content = document.getElementById('content');
    if (content) {
        var header = document.getElementById('header');
        var workArea = document.getElementById('workArea');
        var authArea = document.getElementById('authArea');
        var loginArea = document.getElementById('loginArea');
        var contentWrapper = document.getElementById('contentWrapper');

        //Once window hits the minimum width and height, add after classes to 
        var width = window.innerWidth
		|| document.documentElement.clientWidth
		|| document.body.clientWidth;

        var height = window.innerHeight
		|| document.documentElement.clientHeight
		|| document.body.clientHeight

        if (width <= minimumWorkAreaWidth) {
            if (content && !content.className.match(/(?:^|\s)contentAfter(?!\S)/)) {
                content.className += " contentAfter";
            }

            if (header && !header.className.match(/(?:^|\s)headerAfter(?!\S)/)) {
                header.className += " headerAfter";
            }

            if (workArea && !workArea.className.match(/(?:^|\s)workAreaAfter(?!\S)/)) {
                workArea.className += " workAreaAfter";
            }

            if (authArea && !authArea.className.match(/(?:^|\s)authAreaAfter(?!\S)/)) {
                authArea.className += " authAreaAfter"
            }

            if (loginArea && !loginArea.className.match(/(?:^|\s)loginAreaAfter(?!\S)/)) {
                loginArea.className += " loginAreaAfter"
            }

            if (contentWrapper && !contentWrapper.className.match(/(?:^|\s)contentWrapperAfter(?!\S)/)) {
                contentWrapper.className += " contentWrapperAfter";
            }
        }
        else {
            if (content) {
                content.className = content.className.replace(/(?:^|\s)contentAfter(?!\S)/g, '');
            }
            if (header) {
                header.className = header.className.replace(/(?:^|\s)headerAfter(?!\S)/g, '');
            }
            if (workArea) {
                workArea.className = workArea.className.replace(/(?:^|\s)workAreaAfter(?!\S)/g, '');
            }
            if (authArea) {
                authArea.className = authArea.className.replace(/(?:^|\s)authAreaAfter(?!\S)/g, '');
            }
            if (loginArea) {
                loginArea.className = loginArea.className.replace(/(?:^|\s)loginAreaAfter(?!\S)/g, '');
            }
            if (contentWrapper) {
                contentWrapper.className = contentWrapper.className.replace(/(?:^|\s)contentWrapperAfter(?!\S)/g, '');
            }
        }
    }
}

function onResizeBody() {
    adjustDisplay();
}

if (typeof Login != 'undefined') {
    Login.submitLoginRequest = function () {
        var u = new InputUtil();
        var e = new LoginErrors();
        var userName = document.getElementById(Login.userNameInput);
        var password = document.getElementById(Login.passwordInput);

        if (!userName.value || !password.value) {

            if (!supportErrorDisplayed) {
                u.setError(userName, 'You must enter a valid UCSB Net ID and Password. Please try again.')
            }
            //incrementFailedLoginAttemptCount();
            resetLoginForm();
            userName.focus();
            return false;
        }

        //append domain to username without visibility on form
        for (var i = 0; i < loginForm.elements.length; i++) {
            var e = loginForm.elements[i];
            if (e.name === 'UserName') {
                var temp = e.cloneNode(true);
                temp.style.display = "none"
                temp.value = temp.value.trim() + '@my.ucsb.edu';
                e.name = 'placeholder';
                loginForm.appendChild(temp);
                break;
            }
        }

        document.forms['loginForm'].submit();
        return false;
    };
}

function addBrowserCloseMessage() {

    var signoutArea = document.getElementById('signoutArea');
    if (signoutArea) {
        var instruction = document.getElementById('instruction');
        if (instruction) {
            instruction.innerHTML = 'You have successfully signed out.<br><br><strong>Please close your browser session for added security.</strong>';
        }

        // var closeBrowserDiv = document.createElement('div');
        // closeBrowserDiv.id = 'closeBrowserDiv';

        // var closeBrowserButton = document.createElement('span');

        // closeBrowserButton.value = 'Close Browser';
        // closeBrowserButton.id = 'closeBrowserButton';
        // closeBrowserButton.className = 'closeButton';
        // closeBrowserButton.innerHTML = 'Close Browser';
        // closeBrowserButton.onclick = function() {
        // // window.open("","_self");
        // // window.close();
        // // return false;
        // self.close();
        // };
        // closeBrowserDiv.appendChild(closeBrowserButton);
        // signoutArea.appendChild(closeBrowserDiv);
    }

}

function addOutageNotice() {
    var loginMessage = document.getElementById('loginMessage');
    if (loginMessage) {
        loginMessage.innerHTML = '<p style="color:red">SSO will be unavailable on May 13, 2017, between 4:00am and 11:00pm PST</p>Please sign in with your UCSB Net ID and Password';
    }
}

function resetLoginForm() {

    var loginForm = document.getElementById('loginForm');
    if (loginForm) {
        //Reset the form
        loginForm.reset();

        var userNameInput = document.getElementById('userNameInput');

        //Why isn't reset working here?
        userNameInput.value = "";

        if (userNameInput) {
            userNameInput.placeholder = "UCSB Net ID";
            userNameInput.focus();
        }
    }
}

function loginExists() {
    if (typeof Login != 'undefined') {
        return true;
    }
    return false;
}

function errorTextDisplayed() {
    var errorText = document.getElementById('errorText');
    if (errorText) {
        var errorTextValue = errorText.innerHTML;
        if (errorTextValue.length > 0 && errorTextValue.startsWith("Incorrect") || supportErrorDisplayed) {
            return true;
        }
    }
    return false;
}

function incrementFailedLoginAttemptCount() {
    //Reads (or creates) SA Login Attempt Cookie
    var cookieValue = readCookie(cookieName);
    if (cookieValue != null) {
        var loginCount = parseInt(cookieValue, 10) + 1;
        writeCookie(cookieName, loginCount.toString(), 1000);
        if (loginCount >= supportLoginAttemptCount) {
            displaySupportErrorMessage(true);
        }
    }

}

function resetFailedLoginAttemptCount() {
    //Resets Login Attempt Count
    writeCookie(cookieName, "0", 1000);
    displaySupportErrorMessage(false);
}

function displaySupportErrorMessage(display) {

    var errorHtml = "If you believe your UCSB Net ID and password are correct, please contact <a href=\"mailto:SSOHelp@sa.ucsb.edu\">support</a>."
    var emptyErrorHtml = "<label id=\"errorText\" for=\"\"></label>"
    var errorDiv = document.getElementById('error');
    if (errorDiv) {
        if (display) {
            errorDiv.innerHTML = errorHtml;
            supportErrorDisplayed = true;
        }
        else {
            errorDiv.innerHTML = emptyErrorHtml;
            supportErrorDisplayed = false;
        }
    }

}

function writeCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    }
    else var expires = "";
    document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}



function eraseCookie(name) {
    createCookie(name, "", -1);
}


//Onload Functionality
//StartsWith support for IE
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
    };
}

if (errorTextDisplayed()) {
    incrementFailedLoginAttemptCount();
    resetLoginForm();
}
else {
    resetFailedLoginAttemptCount();
}

resetLoginForm();
adjustDisplay();
addBrowserCloseMessage();
//addOutageNotice();

//Handle resizing of window and repositioning of elements
document.getElementsByTagName("BODY")[0].onresize = function () { onResizeBody() };





//]]>
  </script>
 </body>
</html>

